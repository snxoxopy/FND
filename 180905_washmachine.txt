//5th work
//4th work
//3rd work
//2nd work

/*

* washmachine.c

*

* Created: 2018-08-22 오전 11:41:09

* Author : kccistc

*/

#define F_CPU 16000000UL

#include <avr/io.h>

#include <util/delay.h>




enum washState { IDLE, WASH, DRY} WashStates;




void avrInit(void);

uint8_t GetSWSts1(void);

uint8_t GetSWSts2(void);




int main(void)

{

 uint8_t washFlag=0, dryFlag=0;

 

 avrInit();

 OCR0 = 10;

 while (1)

 {

  switch(WashStates)

  {

   case IDLE:

    if (GetSWSts1()) // 세탁모드

    {

     washFlag = 1;

     dryFlag = 0;

    }

    else if (GetSWSts2()) // 탈수 모드

    {

     washFlag = 0;

     dryFlag = 1;

    }

    else if (GetSWSts3()) // 동작 

    {

     if (washFlag)

     {

      washFlag = 0;

      dryFlag = 0;

      WashStates =  WASH;

     }

     else if (dryFlag)

     {

      washFlag = 0;

      dryFlag = 0;

      WashStates =  DRY;

     }

    }

    break;

   case WASH:

    RunWash();

   

    break;

   case DRY:

    RunDry();

   

    break;

   

  }

 }

}







void avrInit(void)

{

 DDRB = 0xff;  // PWM 출력 포트

 PORTB = 0xff;

 DDRD = 0xff;  // 

 PORTD = 0xff;

 DDRG = 0x00;  // 버튼 입력 포트

 PORTG = 0xff;

 

 TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);   // 1024분주

 TCCR0 |= (1<<WGM01) | (1<<WGM00);  // fast pwm mode

 TCCR0 |= (1<<COM01) | (1<<COM00);  // OC0 출력 모드

 //TIMSK |= (1<<OCIE0);   // 비교일치 인터럽트

}




uint8_t GetSWSts1(void)

{

 static unsigned char state_previous=1, state_current;

 state_current = (PING & 0x02) >> 1;

 _delay_ms(10);

 if (state_current != state_previous)

 {

  state_previous = state_current;

  

  if (state_current == 0) return 1;

 }

 return 0;

}







uint8_t GetSWSts2(void)

{

 static uint8_t state_previous=1, state_current;

 state_current = (PING & 0x04) >> 2;

 _delay_ms(10);

 if (state_current != state_previous)

 {

  state_previous = state_current;

  

  if (state_current == 0) return 1;

 }

 return 0;

}







uint8_t GetSWSts3(void)

{

 static uint8_t state_previous=1, state_current;

 state_current = (PING & 0x08) >> 3;

 _delay_ms(10);

 if (state_current != state_previous)

 {

  state_previous = state_current;

  

  if (state_current == 0) return 1;

 }

 return 0;

}